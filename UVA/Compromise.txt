
// UVA - 531 - Compromise

#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
using namespace std;

ifstream fin("input.txt");
#define cin fin

int DP [101][101];

int LCS_DP(string txt1[],string txt2[],int s1,int s2)
{
	for (int i=0;i<=s1;i++)
	{
		for (int j=0;j<=s2;j++)
		{
			if (i == 0 || j == 0)
				DP[i][j] = 0;

			else if (txt1[i-1] == txt2[j-1])
				DP[i][j] = 1 + DP[i-1][j-1];

			else
				DP[i][j] = max ( DP[i][j-1] , DP[i-1][j]);
		}
	}

	return DP[s1][s2];
}

string BackTrace(string txt1[],string txt2[],int s1,int s2)
{
	if (s1 == 0 || s2 == 0)
		return "";

	if ( txt1[s1-1] == txt2[s2-1] )
		return BackTrace(txt1,txt2,s1-1,s2-1) + " " + txt1[s1-1];

	else
		if ( DP[s1][s2-1] > DP[s1-1][s2] )
			return BackTrace(txt1,txt2,s1,s2-1);

		else
			return BackTrace(txt1,txt2,s1-1,s2);
}

int TextToArrayOfStrings(string text,string arr[])
{
	stringstream ss(text);

	int i;
	for (i=0; !ss.eof() ;i++)
		ss >> arr[i];

	return i-1;
}

int main ()
{
	string text1[100];
	string text2[100];

	int numOfWordsOfText1;
	int numOfWordsOfText2;

	string txt1;
	string txt2;

	while ( getline(cin,txt1,'#') && getline(cin,txt2,'#') )
	{
		numOfWordsOfText1 = TextToArrayOfStrings(txt1,text1);
		numOfWordsOfText2 = TextToArrayOfStrings(txt2,text2);
		
		LCS_DP(text1,text2,numOfWordsOfText1,numOfWordsOfText2);

		string output = BackTrace(text1,text2,numOfWordsOfText1,numOfWordsOfText2);
		output.erase(0,1);
		cout << output << endl;
	}

	return 0;
}