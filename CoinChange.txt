
// Coin Change Problem  , D & C and DP

#include <iostream>
#include <string>
#include <fstream>
using namespace std;

ifstream fin("input.txt");
#define cin fin

int CoinChange(int arr[],int numberOfCoins,int amount)
{
	if (amount == 0)
		return 1;

	if (numberOfCoins == 0)
		return 0;
	
	if (arr[numberOfCoins-1] > amount)
		return CoinChange(arr,numberOfCoins-1,amount);

	else if (arr[numberOfCoins-1] <= amount)
		return CoinChange(arr,numberOfCoins,amount-arr[numberOfCoins-1]) + CoinChange(arr,numberOfCoins-1,amount);

	
}

int DP[5+1][10+1]; // +1 for base case

int CoinChange_DP(int arr[],int numberOfCoins,int amount)
{
	for(int i=0;i<=numberOfCoins;i++)
	{
		for(int j=0;j<=amount;j++)
		{
			if (j == 0)
				DP[i][j] = 1;

			else if (i == 0)
				DP[i][j] = 0;

			else if (arr[i-1] > j)
				DP[i][j] = DP[i-1][j];

			else if (arr[i-1] <= j)
				DP[i][j] = DP[i][ j-arr[i-1] ] + DP[i-1][j];
		}
	}

	return DP[numberOfCoins][amount];
}

int main()
{
	int coins[5] = {50,25,10,5,1};
	int amount = 10; 

	//int numberOfWays = CoinChange(coins,5,amount);
	int numberOfWays = CoinChange_DP(coins,5,amount);

	cout << numberOfWays << endl;

    return 0;
}