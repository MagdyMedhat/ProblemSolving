/*
ID: magdyme1
PROG: crypt1
LANG: C++
*/


// problem - crypt1 - USACO 

#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>
#include <deque>
using namespace std;

ifstream fin("crypt1.in");
ofstream fout("crypt1.out");

#define cin fin
#define cout fout

bool check (int number , vector<int> V);
 
int main ()
{
	int numOfnum ;
	int count;
	vector <int> numbers;
	vector <int> num;
	int num3 , num2;
	while (cin >> numOfnum)
	{
		count = 0;
		for (int i = 0 ; i < numOfnum ; i++)
		{
			int temp;
			cin >> temp;
			numbers.push_back(temp);
		}
		for(int i = 0 ; i < numOfnum ; i++)
		{
			for(int j = 0 ; j < numOfnum ; j++)
			{	
				for(int c = 0 ; c < numOfnum ; c++)
				{
					num3 = 0;
					num3 += (numbers[i]*100);
					num3 += (numbers[j]*10);
					num3 += numbers[c]; 
					for(int a = 0 ; a < numOfnum ; a++)
					{
						for(int b = 0 ; b < numOfnum ; b++)
						{
							num2 = 0;
							num.clear();
							num2 += (numbers[a]*10);
							num2 += numbers[b];
							num.push_back(numbers[a]);
							num.push_back(numbers[b]);
/////////////////////////////////////////////////////////////////////////////
							int FirstProduct = num[1] * num3; 
/////////////////////////////////////////////////////////////////////////////							
							int SecondProduct = num[0] * num3;
/////////////////////////////////////////////////////////////////////////////
							int FinalProduct = num3 * num2 ;
/////////////////////////////////////////////////////////////////////////////
							if(FirstProduct <= 999 && SecondProduct <= 999 && FinalProduct <= 9999 && check(FirstProduct,numbers) && check(SecondProduct,numbers) && check(FinalProduct,numbers))
								count++;
						}
					}
				}
			}
		}
		numbers.clear();
		cout << count << endl;
	}
	return 0;
}

bool check (int number , vector <int> V)
{
	int temp;
	bool result;
	while(number != 0)
	{
		result = false;
		temp = number % 10;
		number /= 10;
		for(int i = 0 ; i < V.size() ; i++)
		{
			if(temp == V[i])
			{
				result = true;
				break;
			}
		}
		if (result == false)
			return false;
	}
	return true;
}